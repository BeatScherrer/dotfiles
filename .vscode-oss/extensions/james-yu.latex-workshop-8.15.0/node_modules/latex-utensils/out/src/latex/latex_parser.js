"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsePreamble = exports.parse = void 0;
const _latexParser = require("./latex_parser_simple");
const _latexParserWithTrace = require("./latex_parser_trace");
const timeout_1 = require("../pegjs/timeout");
var find_all_1 = require("./find_all");
Object.defineProperty(exports, "find", { enumerable: true, get: function () { return find_all_1.find; } });
Object.defineProperty(exports, "findAll", { enumerable: true, get: function () { return find_all_1.findAll; } });
Object.defineProperty(exports, "findAllSequences", { enumerable: true, get: function () { return find_all_1.findAllSequences; } });
Object.defineProperty(exports, "findNodeAt", { enumerable: true, get: function () { return find_all_1.findNodeAt; } });
var matcher_1 = require("./matcher");
Object.defineProperty(exports, "pattern", { enumerable: true, get: function () { return matcher_1.pattern; } });
var stringify_1 = require("./stringify");
Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return stringify_1.stringify; } });
__exportStar(require("./latex_parser_types"), exports);
var pegjs_types_1 = require("../pegjs/pegjs_types");
Object.defineProperty(exports, "isSyntaxError", { enumerable: true, get: function () { return pegjs_types_1.isSyntaxError; } });
Object.defineProperty(exports, "SyntaxError", { enumerable: true, get: function () { return pegjs_types_1.SyntaxError; } });
function parse(s, _option) {
    const option = _option ? Object.assign({}, _option) : undefined;
    if (option && option.timeout) {
        if (typeof option.timeout !== 'object') {
            option.timeout = new timeout_1.TimeKeeper(option.timeout);
        }
    }
    if (option && option.tracer) {
        return _latexParserWithTrace.parse(s, option);
    }
    else {
        return _latexParser.parse(s, option);
    }
}
exports.parse = parse;
function parsePreamble(s, option) {
    const timeout = option && option.timeout;
    return parse(s, { startRule: 'Preamble', timeout });
}
exports.parsePreamble = parsePreamble;
//# sourceMappingURL=latex_parser.js.map